{
	"name": "terracotta",
	"displayName": "Terracotta",
	"description": "Provides code editor features for the Terracotta language",
	"version": "0.0.1",
	"publisher": "mrawesomeowl",
	"repository": "https://github.com/MrAwesomeOwl/terracotta-vscode",
	"icon": "assets/icons/extension.png",
	"engines": {
		"vscode": "^1.74.0"
	},
	"categories": [
		"Programming Languages"
	],
	"activationEvents": [
		"onLanguage:terracotta",
		"onDebug",
		"workspaceContains:**/**.tc",
		"workspaceContains:**/**.tcil"
	],
	"main": "./out/extension.js",
	"contributes": {
		"languages": [
			{
				"id": "terracotta",
				"aliases": [
					"Terracotta"
				],
				"extensions": [
					".tc"
				],
				"icon": {
					"dark": "./assets/icons/logo-padded.svg",
					"light": "./assets/icons/logo-padded.svg"
				},
				"configuration": "./language-configuration.json"
			},
			{
				"id": "json",
				"extensions": [
					".tcil"
				]
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "terracotta-container",
					"title": "Terracotta",
					"icon": "assets/icons/logo-outline.svg"
				}
			]
		},
		"views": {
			"terracotta-container": [
				{
					"type": "tree",
					"id": "terracotta.itemLibraryEditor",
					"name": "Item Libraries"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "terracotta.itemLibraryEditor",
				"contents": "Please open a workspace or an item library."
			}
		],
		"configuration": {
			"title": "Terracotta",
			"properties": {
				"terracotta.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "verbose"
				},
				"terracotta.version": {
					"scope": "window",
					"type": "string",
					"description": "The version of the language server/compiler to use. The recommended way to change this setting is through the 'Terracotta v.X.X.X' button in the bottom right of the window.",
					"default": ""
				},
				"terracotta.useSourceCode": {
					"scope": "application",
					"type": "boolean",
					"description": "Whether or not to directly run the Terracotta source code when compiling or starting the language server",
					"default": ""
				},
				"terracotta.sourcePath": {
					"scope": "application",
					"type": "string",
					"description": "Only relvent if Use Source Code is enabled. The path to the Terracotta source code (should point to the uppermost folder of the installation, not to anything inside)",
					"default": ""
				}
			}
		},
		"configurationDefaults": {
			"editor.quickSuggestions": {
				"other": "on",
				"comments": "off",
				"strings": "on"
			},
			"editor.wordBasedSuggestions": "off"
		},
		"grammars": [
			{
				"language": "terracotta",
				"scopeName": "source.terracotta",
				"path": "./syntaxes/main.json"
			}
		],
		"menus": {
			"editor/title": [
				{
					"command": "extension.terracotta.importCodeValue",
					"when": "resourceLangId == terracotta",
					"group": "navigation@1"
				}
			],
			"commandPalette": [
				{
					"command": "extension.terracotta.itemEditor.showMigrationInfo",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.addLibraryToProject",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.openFile",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.delete",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.addItemToLibrary",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.importItemToLibrary",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.startEditingItem",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.giveStaticCopy",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.rename",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.stopEditingItem",
					"when": "false"
				},
				{
					"command": "extension.terracotta.itemEditor.copyItemConstructor",
					"when": "false"
				},
				{
					"command": "extension.terracotta.compileEditorSend",
					"when": "false"
				},
				{
					"command": "extension.terracotta.compileEditorCopy",
					"when": "false"
				},
				{
					"command": "extension.terracotta.info.codeClientAuth",
					"when": "false"
				}
			],
			"view/item/context": [
				{
					"command": "extension.terracotta.itemEditor.addLibraryToProject",
					"when": "view == terracotta.itemLibraryEditor && viewItem == project",
					"group": "inline"
				},
				{
					"command": "extension.terracotta.itemEditor.addItemToLibrary",
					"when": "view == terracotta.itemLibraryEditor && viewItem == library",
					"group": "inline"
				},
				{
					"command": "extension.terracotta.itemEditor.importItemToLibrary",
					"when": "view == terracotta.itemLibraryEditor && viewItem == library",
					"group": "inline"
				},
				{
					"command": "extension.terracotta.itemEditor.startEditingItem",
					"when": "view == terracotta.itemLibraryEditor && viewItem == item",
					"group": "inline"
				},
				{
					"command": "extension.terracotta.itemEditor.stopEditingItem",
					"when": "view == terracotta.itemLibraryEditor && viewItem == itemBeingEdited",
					"group": "inline"
				},
				{
					"command": "extension.terracotta.itemEditor.copyItemConstructor",
					"when": "view == terracotta.itemLibraryEditor && (viewItem == item || viewItem == itemBeingEdited || viewItem == invalidItem || viewItem == outdatedItem)",
					"group": "inline"
				},
				{
					"command": "extension.terracotta.itemEditor.showMigrationInfo",
					"when": "view == terracotta.itemLibraryEditor && viewItem == outdatedItem",
					"group": "inline"
				},
				{
					"command": "extension.terracotta.itemEditor.addItemToLibrary",
					"when": "view == terracotta.itemLibraryEditor && viewItem == library",
					"group": "context@1"
				},
				{
					"command": "extension.terracotta.itemEditor.importItemToLibrary",
					"when": "view == terracotta.itemLibraryEditor && viewItem == library",
					"group": "context@2"
				},
				{
					"command": "extension.terracotta.itemEditor.openFile",
					"when": "view == terracotta.itemLibraryEditor && viewItem == library",
					"group": "context@2"
				},
				{
					"command": "extension.terracotta.itemEditor.copyItemConstructor",
					"when": "view == terracotta.itemLibraryEditor && (viewItem == item || viewItem == itemBeingEdited || viewItem == invalidItem || viewItem == outdatedItem)",
					"group": "context@1"
				},
				{
					"command": "extension.terracotta.itemEditor.startEditingItem",
					"when": "view == terracotta.itemLibraryEditor && viewItem == item",
					"group": "context@2"
				},
				{
					"command": "extension.terracotta.itemEditor.stopEditingItem",
					"when": "view == terracotta.itemLibraryEditor && viewItem == itemBeingEdited",
					"group": "context@2"
				},
				{
					"command": "extension.terracotta.itemEditor.giveStaticCopy",
					"when": "view == terracotta.itemLibraryEditor && (viewItem == item || viewItem == itemBeingEdited)",
					"group": "context@3"
				},
				{
					"command": "extension.terracotta.itemEditor.rename",
					"when": "view == terracotta.itemLibraryEditor && (viewItem == item || viewItem == invalidItem || viewItem == outdatedItem)",
					"group": "context@4"
				},
				{
					"command": "extension.terracotta.itemEditor.delete",
					"when": "view == terracotta.itemLibraryEditor && (viewItem == library || viewItem == item || viewItem == itemBeingEdited || viewItem == invalidItem)"
				}
			]
		},
		"commands": [
			{
				"command": "extension.terracotta.itemEditor.showMigrationInfo",
				"title": "Info",
				"icon": "$(question)",
				"category": "terracotta"
			},
			{
				"command": "extension.terracotta.itemEditor.addLibraryToProject",
				"title": "New Library",
				"category": "Terracotta",
				"icon": "$(plus)"
			},
			{
				"command": "extension.terracotta.itemEditor.openFile",
				"title": "Open File",
				"category": "terracotta"
			},
			{
				"command": "extension.terracotta.itemEditor.delete",
				"title": "Delete",
				"category": "terracotta"
			},
			{
				"command": "extension.terracotta.itemEditor.addItemToLibrary",
				"title": "New Item",
				"category": "Terracotta",
				"icon": "$(plus)"
			},
			{
				"command": "extension.terracotta.itemEditor.importItemToLibrary",
				"title": "Import Item from Minecraft",
				"category": "Terracotta",
				"icon": "$(cloud-download)"
			},
			{
				"command": "extension.terracotta.itemEditor.startEditingItem",
				"title": "Edit in Minecraft",
				"category": "Terracotta",
				"icon": "$(pencil)"
			},
			{
				"command": "extension.terracotta.itemEditor.giveStaticCopy",
				"title": "Get Static Copy in Minecraft",
				"category": "Terracotta"
			},
			{
				"command": "extension.terracotta.itemEditor.rename",
				"title": "Rename",
				"category": "Terracotta"
			},
			{
				"command": "extension.terracotta.itemEditor.stopEditingItem",
				"title": "Save & Stop Editing",
				"category": "Terracotta",
				"icon": "$(check)"
			},
			{
				"command": "extension.terracotta.itemEditor.copyItemConstructor",
				"title": "Copy Constructor",
				"category": "Terracotta",
				"icon": "$(files)"
			},
			{
				"command": "extension.terracotta.compileEditorSend",
				"title": "Compile File & Send to CodeClient",
				"category": "Terracotta",
				"icon": "$(run-above)"
			},
			{
				"command": "extension.terracotta.compileEditorCopy",
				"title": "Compile File & Copy to Clipboard",
				"category": "Terracotta",
				"icon": "$(play)"
			},
			{
				"command": "extension.terracotta.refreshCodeClient",
				"title": "Refresh CodeClient Connection",
				"category": "Terracotta"
			},
			{
				"command": "extension.terracotta.importCodeValue",
				"title": "Import Code Value From Minecraft",
				"category": "Terracotta",
				"icon": "$(dfcodeitem-gamevalue)"
			},
			{
				"command": "extension.terracotta.changeVersion",
				"title": "Switch Language Version",
				"category": "Terracotta",
				"icon": "$(versions)"
			},
			{
				"command": "extension.terracotta.info.codeClientAuth",
				"title": "Code Client Auth Info",
				"category": "Terracotta"
			}
		],
		"debuggers": [
			{
				"type": "terracotta",
				"languages": [
					"terracotta"
				],
				"label": "Terracotta",
				"program": "./out/debugger.js",
				"runtime": "node",
				"configurationAttributes": {
					"launch": {
						"required": [
							"folder"
						],
						"properties": {
							"folder": {
								"type": "string",
								"description": "Absolute path to a terracotta project folder",
								"default": "${workspaceFolder}"
							},
							"exportMode": {
								"type": "string",
								"description": "What to do with the compiled code templates",
								"enum": [
									"sendToCodeClient",
									"saveToFiles"
								],
								"enumDescriptions": [
									"Uses codeclient's placer to automatically add code to a plot",
									"Saves code templates to files"
								],
								"default": "sendToCodeClient"
							},
							"autoSwitchToDev": {
								"type": "boolean",
								"description": "If in play or build mode when launching, automatically switch to dev mode instead of throwing an error",
								"default": true
							},
							"autoSwitchToPlay": {
								"type": "boolean",
								"description": "After placing all compiled code, automatically run /play",
								"default": true
							},
							"plotSize": {
								"type": "number",
								"description": "How many minecraft blocks long the codespace being compiled to is\nBasic: 50\nLarge: 100\nMassive: 300\nMega: 300",
								"default": 50
							},
							"alwaysReplace": {
								"type": "array",
								"description": "Always re-place these templates even if they haven't changed. Can help with CodeClient bugging out while placing.\nEach entry should be a string that takes the format of 'HEADER templateName' e.g. 'FUNCTION useItem' or 'PLAYER_EVENT Join' or 'PROCESS name w/ special chars!'",
								"default": []
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "terracotta",
						"request": "launch",
						"name": "Compile Project",
						"folder": "${workspaceFolder}",
						"exportMode": "sendToCodeClient",
						"autoSwitchToDev": true,
						"autoSwitchToPlay": true,
						"plotSize": 50
					}
				],
				"configurationSnippets": [
					{
						"label": "Terracotta: Compile to CodeClient",
						"description": "Compiles the project and sends the results to codeclient",
						"body": {
							"type": "terracotta",
							"request": "launch",
							"name": "Compile Project",
							"folder": "^\"\\${workspaceFolder}\"",
							"exportMode": "sendToCodeClient",
							"autoSwitchToDev": true,
							"autoSwitchToPlay": true,
							"plotSize": 50
						}
					}
				]
			}
		],
		"icons": {
			"dfcodeitem-txt": {
				"description": "String",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "s"
				}
			},
			"dfcodeitem-comp": {
				"description": "Styled Text",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "t"
				}
			},
			"dfcodeitem-num": {
				"description": "Number",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "n"
				}
			},
			"dfcodeitem-loc": {
				"description": "Location",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "l"
				}
			},
			"dfcodeitem-vec": {
				"description": "Vector",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "v"
				}
			},
			"dfcodeitem-snd": {
				"description": "Sound",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "S"
				}
			},
			"dfcodeitem-part": {
				"description": "Particle",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "P"
				}
			},
			"dfcodeitem-pot": {
				"description": "Potion",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "p"
				}
			},
			"dfcodeitem-var": {
				"description": "Variable",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "V"
				}
			},
			"dfcodeitem-gamevalue": {
				"description": "Game Value",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "g"
				}
			},
			"dfcodeitem-parameter": {
				"description": "Parameter",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "a"
				}
			},
			"dfcodeitem-item": {
				"description": "Item",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": "i"
				}
			},
			"dfcodeitem-empty": {
				"description": "Nothing",
				"default": {
					"fontPath": "/assets/icons/icons.woff",
					"fontCharacter": " "
				}
			}
		}
	},
	"scripts": {
		"compile": "tsc -p ./",
		"lint": "eslint \"src/**/*.ts\"",
		"watch": "tsc -watch -p ./"
	},
	"dependencies": {
		"await-notify": "^1.0.1",
		"base64-js": "^1.5.1",
		"copy-paste": "^1.5.3",
		"fix-esm": "^1.0.1",
		"json-stable-stringify": "^1.1.1",
		"nbtify": "^2.2.0",
		"tsc-esm-fix": "^3.1.2",
		"vscode-debugprotocol": "^1.51.0",
		"vscode-jsonrpc": "^8.2.1",
		"vscode-languageclient": "^7.0.0",
		"vscode-languageserver": "^9.0.1",
		"ws": "^8.18.0"
	},
	"devDependencies": {
		"@types/copy-paste": "^1.1.33",
		"@types/node": "^18",
		"@types/vscode": "^1.73.0",
		"@types/ws": "^8.5.11",
		"typescript": "^5.4.2"
	}
}
